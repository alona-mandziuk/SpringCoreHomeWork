Проведіть аналіз написаного коду із попереднього завдання на відповідність принципам SOLID:

1. Принцип єдиної відповідальності (Single Responsibility Principle, SRP):

Інтерфейс Quest має одну відповідальність - описувати метод для виконання квесту.
Класи DragonQuest та PrincessQuest реалізують конкретні квести, зберігаючи SRP.

2. Принцип відкритості/закритості (Open/Closed Principle, OCP):

Клас Knight є відкритим для змін, завдяки інтерфейсу Quest та конфігурації Spring.

3. Принцип підстановки Барбари Лісков (Liskov Substitution Principle, LSP):

Класи DragonQuest, PrincessQuest замінюють інтерфейс Quest без порушення поведінки.
Клас Knight використовує інтерфейс Quest для залежностей, і його робота не залежить від конкретного типу квесту.

4. Принцип розділення інтерфейсу та реалізації (Interface Segregation Principle, ISP):

Інтерфейс Quest має лише один метод, не завантажуючи його з надлишковими функціями.

5. Принцип інверсії залежності (Dependency Inversion Principle, DIP):

Класи Knight та KnightConfig використовують абстракцію (інтерфейс Quest), а не конкретні реалізації.
Використання Spring Framework у KnightConfig допомагає забезпечити залежності
та робить систему більш гнучкою для змін.